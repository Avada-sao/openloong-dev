<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="useful__math_8cpp" kind="file" language="C++">
    <compoundname>useful_math.cpp</compoundname>
    <includes refid="useful__math_8h" local="yes">useful_math.h</includes>
    <includes local="yes">Eigen/Dense</includes>
    <incdepgraph>
      <node id="1">
        <label>useful_math.cpp</label>
        <link refid="useful__math_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Eigen/Dense</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="2">
        <label>useful_math.h</label>
        <link refid="useful__math_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceEigen">Eigen</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="useful__math_8cpp_1af037bc69777912864b2dd9689fc53463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd pseudoInv_SVD</definition>
        <argsstring>(const Eigen::MatrixXd &amp;mat)</argsstring>
        <name>pseudoInv_SVD</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="15" column="17" bodyfile="math/useful_math.cpp" bodystart="15" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1afee736f9aea90e8cdca938c355c6c21b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd pseudoInv_right</definition>
        <argsstring>(const Eigen::MatrixXd &amp;M)</argsstring>
        <name>pseudoInv_right</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="38" column="17" bodyfile="math/useful_math.cpp" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a880b738cfae7560eafd53111e1023b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd pseudoInv_right_weighted</definition>
        <argsstring>(const Eigen::MatrixXd &amp;M, const Eigen::DiagonalMatrix&lt; double, -1 &gt; &amp;W)</argsstring>
        <name>pseudoInv_right_weighted</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; double, -1 &gt; &amp;</type>
          <declname>W</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="46" column="17" bodyfile="math/useful_math.cpp" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1afad6c3caf0792565bb383cdc2c109255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd dyn_pseudoInv</definition>
        <argsstring>(const Eigen::MatrixXd &amp;M, const Eigen::MatrixXd &amp;dyn_M, bool isMinv)</argsstring>
        <name>dyn_pseudoInv</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>dyn_M</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isMinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="65" column="17" bodyfile="math/useful_math.cpp" bodystart="65" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a1385bfa9bfd643e0197453b251545b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 3&gt; eul2Rot</definition>
        <argsstring>(double roll, double pitch, double yaw)</argsstring>
        <name>eul2Rot</name>
        <param>
          <type>double</type>
          <declname>roll</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="84" column="15" bodyfile="math/useful_math.cpp" bodystart="84" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1afb3f75dd1b7d3592b997ddfc6e9605d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d Rot2eul</definition>
        <argsstring>(const Eigen::Matrix3d &amp;rot)</argsstring>
        <name>Rot2eul</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="98" column="17" bodyfile="math/useful_math.cpp" bodystart="98" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1af23d1994eda6688cf28050a06631ce68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; eigen2std</definition>
        <argsstring>(const Eigen::VectorXd &amp;eigenVector)</argsstring>
        <name>eigen2std</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>eigenVector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="106" column="13" bodyfile="math/useful_math.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1accf9d6157c07b4d20d3eee5adbbd9925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond eul2quat</definition>
        <argsstring>(double roll, double pitch, double yaw)</argsstring>
        <name>eul2quat</name>
        <param>
          <type>double</type>
          <declname>roll</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="111" column="20" bodyfile="math/useful_math.cpp" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a17a87cb290d7d733d38f4501be54c5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 1&gt; diffRot</definition>
        <argsstring>(const Eigen::Matrix3d &amp;Rcur, Eigen::Matrix3d &amp;Rdes)</argsstring>
        <name>diffRot</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>Rcur</declname>
        </param>
        <param>
          <type>Eigen::Matrix3d &amp;</type>
          <declname>Rdes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="120" column="15" bodyfile="math/useful_math.cpp" bodystart="120" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a085d863b7ffc375dbbaf24e3e7a593ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 4, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 4, 1&gt; quat2axisAngle</definition>
        <argsstring>(const Eigen::Quaternion&lt; double &gt; &amp;quat)</argsstring>
        <name>quat2axisAngle</name>
        <param>
          <type>const Eigen::Quaternion&lt; double &gt; &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="139" column="15" bodyfile="math/useful_math.cpp" bodystart="139" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a0af15db62db60f23a2a451b44e2e117e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond intQuat</definition>
        <argsstring>(const Eigen::Quaterniond &amp;quat, const Eigen::Matrix&lt; double, 3, 1 &gt; &amp;w)</argsstring>
        <name>intQuat</name>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>quat</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; double, 3, 1 &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="158" column="20" bodyfile="math/useful_math.cpp" bodystart="158" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a928a196c5b583ec2adeb35dddde1d3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sign</definition>
        <argsstring>(const double &amp;x)</argsstring>
        <name>sign</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="177" column="8" bodyfile="math/useful_math.cpp" bodystart="177" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a63acab4c1c8dd3883666bbc58562a818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double,3,3&gt; Rx3</definition>
        <argsstring>(double theta)</argsstring>
        <name>Rx3</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="186" column="15" bodyfile="math/useful_math.cpp" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a206258adb53676e62925412e917f125c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double,3,3&gt; Ry3</definition>
        <argsstring>(double theta)</argsstring>
        <name>Ry3</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="195" column="15" bodyfile="math/useful_math.cpp" bodystart="195" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a2ee3c961f194213bee9be5d4f92d19cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double,3,3&gt; Rz3</definition>
        <argsstring>(double theta)</argsstring>
        <name>Rz3</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="204" column="15" bodyfile="math/useful_math.cpp" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1aadf7a717c3974eca493b784ab450176a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double,3,3&gt; CrossProduct_A</definition>
        <argsstring>(Eigen::Matrix&lt; double, 3, 1 &gt; A)</argsstring>
        <name>CrossProduct_A</name>
        <param>
          <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="213" column="15" bodyfile="math/useful_math.cpp" bodystart="213" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1aa4c781935af8c4b0b615b3a5af2d7b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ramp</definition>
        <argsstring>(double u, double tgt, double inc)</argsstring>
        <name>Ramp</name>
        <param>
          <type>double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tgt</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="221" column="8" bodyfile="math/useful_math.cpp" bodystart="221" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8cpp_1a367f4c39363e14ee187965e0531fb887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Limit</definition>
        <argsstring>(double &amp;data, double max, double min)</argsstring>
        <name>Limit</name>
        <param>
          <type>double &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.cpp" line="235" column="7" bodyfile="math/useful_math.cpp" bodystart="235" bodyend="240"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">This<sp/>is<sp/>part<sp/>of<sp/>OpenLoong<sp/>Dynamics<sp/>Control,<sp/>an<sp/>open<sp/>project<sp/>for<sp/>the<sp/>control<sp/>of<sp/>biped<sp/>robot,</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(C)<sp/>2024<sp/>Humanoid<sp/>Robot<sp/>(Shanghai)<sp/>Co.,<sp/>Ltd,<sp/>under<sp/>Apache<sp/>2.0.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Feel<sp/>free<sp/>to<sp/>use<sp/>in<sp/>any<sp/>purpose,<sp/>and<sp/>cite<sp/>OpenLoong-Dynamics-Control<sp/>in<sp/>any<sp/>style,<sp/>to<sp/>contribute<sp/>to<sp/>the<sp/>advancement<sp/>of<sp/>the<sp/>community.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>&lt;https://atomgit.com/openloong/openloong-dyn-control.git&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>&lt;web@openloong.org.cn&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;useful_math.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Eigen/Dense&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Eigen;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SVD<sp/>based<sp/>pseudo-inverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">Eigen::MatrixXd<sp/>pseudoInv_SVD(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;mat)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::Scalar<sp/>Scalar;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>svd<sp/>=<sp/>mat.jacobiSvd(Eigen::ComputeFullU<sp/>|<sp/>Eigen::ComputeFullV);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;singularValues<sp/>=<sp/>svd.singularValues();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>singularValuesInv;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxSgVal{0};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>singularValues.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(singularValues(i)<sp/>&gt;<sp/>maxSgVal)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxSgVal=singularValues(i);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance=<sp/>std::numeric_limits&lt;double&gt;::epsilon()<sp/>*<sp/>std::max(mat.rows(),<sp/>mat.cols())<sp/>*<sp/>maxSgVal;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>singularValuesInv=Eigen::MatrixXd::Zero(mat.cols(),mat.rows());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>singularValues.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(singularValues(i)<sp/>&gt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singularValuesInv(i,<sp/>i)<sp/>=<sp/>Scalar{1}<sp/>/<sp/>singularValues(i);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singularValuesInv(i,<sp/>i)<sp/>=<sp/>Scalar{0};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>svd.matrixV()<sp/>*<sp/>singularValuesInv<sp/>*<sp/>svd.matrixU().adjoint();</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">Eigen::MatrixXd<sp/>pseudoInv_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;M)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>Mres;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>Mres=M*M.transpose();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Mres=M.transpose()*<sp/>Mres.ldlt().solve(Eigen::MatrixXd::Identity(Mres.rows(),<sp/>Mres.cols()));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Mres=M.transpose()*<sp/>Mres.inverse();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mres;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">Eigen::MatrixXd<sp/>pseudoInv_right_weighted(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;M,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DiagonalMatrix&lt;double,<sp/>-1&gt;<sp/>&amp;W)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damp=0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>Mres;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Mres=M*W.inverse()*M.transpose();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Mres=W.inverse()*M.transpose()*<sp/>pseudoInv_SVD(Mres);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>Mres.diagonal().array()<sp/>+=<sp/>damp;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>Mres=W.inverse()*M.transpose()*<sp/>Mres.completeOrthogonalDecomposition().pseudoInverse();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mres;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//Eigen::MatrixXd<sp/>dyn_pseudoInv(const<sp/>MatrixXd<sp/>&amp;M,<sp/>const<sp/>MatrixXd<sp/>&amp;dyn_A)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="comment"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>Minv<sp/>=<sp/>dyn_A.ldlt().solve(Eigen::MatrixXd::Identity(dyn_A.rows(),<sp/>dyn_A.cols()));</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>res<sp/>=<sp/>Minv<sp/>*<sp/>M.transpose()<sp/>*<sp/>(M<sp/>*<sp/>Minv<sp/>*<sp/>M.transpose()).inverse();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>res;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">Eigen::MatrixXd<sp/>dyn_pseudoInv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;M,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;dyn_M,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMinv)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>damp=0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>Minv;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMinv)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Minv<sp/>=<sp/>dyn_M;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Minv<sp/>=<sp/>dyn_M.llt().solve(Eigen::MatrixXd::Identity(dyn_M.rows(),<sp/>dyn_M.cols()));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>temp<sp/>=<sp/>M<sp/>*<sp/>Minv<sp/>*<sp/>M.transpose();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>temp.diagonal().array()<sp/>+=<sp/>damp;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>res<sp/>=<sp/>Minv<sp/>*<sp/>M.transpose()<sp/>*<sp/>temp.completeOrthogonalDecomposition().pseudoInverse();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>res<sp/>=<sp/>Minv<sp/>*<sp/>M.transpose()<sp/>*<sp/>temp.inverse();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>eul2Rot(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>Rx,<sp/>Ry,<sp/>Rz;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>Rz<sp/>&lt;&lt;<sp/>cos(yaw),<sp/>-sin(yaw),<sp/>0,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin(yaw),<sp/>cos(yaw),<sp/>0,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>0,<sp/>1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>Ry<sp/>&lt;&lt;<sp/>cos(pitch),<sp/>0,<sp/>sin(pitch),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>0,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-sin(pitch),<sp/>0,<sp/>cos(pitch);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Rx<sp/>&lt;&lt;<sp/>1,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>cos(roll),<sp/>-sin(roll),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>sin(roll),<sp/>cos(roll);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rz<sp/>*<sp/>Ry<sp/>*<sp/>Rx;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">Eigen::Vector3d<sp/>Rot2eul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3d<sp/>&amp;rot){</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>eul;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>eul(0)<sp/>=<sp/>std::atan2(rot(2,<sp/>1),<sp/>rot(2,<sp/>2));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>eul(1)<sp/>=<sp/>std::atan2(-rot(2,<sp/>0),<sp/>std::sqrt(rot(2,<sp/>1)<sp/>*<sp/>rot(2,<sp/>1)<sp/>+<sp/>rot(2,<sp/>2)<sp/>*<sp/>rot(2,<sp/>2)));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>eul(2)<sp/>=<sp/>std::atan2(rot(1,<sp/>0),<sp/>rot(0,<sp/>0));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eul;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">std::vector&lt;double&gt;<sp/>eigen2std(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;eigenVector){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>stdVector(eigenVector.data(),<sp/>eigenVector.data()<sp/>+<sp/>eigenVector.size());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdVector;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">Eigen::Quaterniond<sp/>eul2quat(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>R<sp/>=<sp/>eul2Rot(roll,<sp/>pitch,<sp/>yaw);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaternion&lt;double&gt;<sp/>quatCur;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>quatCur<sp/>=<sp/>R;<sp/></highlight><highlight class="comment">//rotation<sp/>matrix<sp/>converted<sp/>to<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>resQuat;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>resQuat<sp/>=<sp/>quatCur;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resQuat;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>1&gt;<sp/>diffRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3d<sp/>&amp;Rcur,<sp/>Eigen::Matrix3d<sp/>&amp;Rdes)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>R<sp/>=<sp/>Rcur.transpose()<sp/>*<sp/>Rdes;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>w;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R.isDiagonal(1e-5)<sp/>&amp;&amp;<sp/>fabs(R(0,<sp/>0))<sp/>+<sp/>fabs(R(1,<sp/>1))<sp/>+<sp/>fabs(R(2,<sp/>2))<sp/>-<sp/>3<sp/>&lt;<sp/>1e-3)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.setZero();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R.isDiagonal(1e-5))<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>&lt;&lt;<sp/>R(0,<sp/>0)<sp/>+<sp/>1,<sp/>R(1,<sp/>1)<sp/>+<sp/>1,<sp/>R(2,<sp/>2)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>w<sp/>*<sp/>3.1415<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>l;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>&lt;&lt;<sp/>R(2,<sp/>1)<sp/>-<sp/>R(1,<sp/>2),<sp/>R(0,<sp/>2)<sp/>-<sp/>R(2,<sp/>0),<sp/>R(1,<sp/>0)<sp/>-<sp/>R(0,<sp/>1);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sita<sp/>=<sp/>atan2(l.norm(),<sp/>R(0,<sp/>0)<sp/>+<sp/>R(1,<sp/>1)<sp/>+<sp/>R(2,<sp/>2)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>sita<sp/>*<sp/>l<sp/>/<sp/>l.norm();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>Rcur<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>4,<sp/>1&gt;<sp/>quat2axisAngle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;double&gt;<sp/>&amp;quat)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>quat<sp/>must<sp/>be<sp/>normolized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>4,<sp/>1&gt;<sp/>res;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>2.0<sp/>*<sp/>acos(quat.w());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>sqrt(1<sp/>-<sp/>quat.w()<sp/>*<sp/>quat.w());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>1e-8)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(0)<sp/>=<sp/>quat.x();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(1)<sp/>=<sp/>quat.y();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(2)=quat.z();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(2)<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>rotation<sp/>now<sp/>but<sp/>the<sp/>axis<sp/>must<sp/>not<sp/>be<sp/>[0,0,0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(0)<sp/>=<sp/>quat.x()<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(1)<sp/>=<sp/>quat.y()<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(2)<sp/>=<sp/>quat.z()<sp/>/<sp/>s;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>res(3)<sp/>=<sp/>angle;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">Eigen::Quaterniond<sp/>intQuat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;quat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>1&gt;<sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>Rcur<sp/>=<sp/>quat.normalized().toRotationMatrix();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>Rinc<sp/>=<sp/>Eigen::Matrix3d::Identity();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>w.norm();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theta<sp/>&gt;<sp/>1e-4)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>w_norm;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_norm<sp/>=<sp/>w<sp/>/<sp/>theta;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>a;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>&lt;&lt;<sp/>0,<sp/>-w_norm(2),<sp/>w_norm(1),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_norm(0),<sp/>0,<sp/>-w_norm(0),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-w_norm(1),<sp/>w_norm(0),<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rinc<sp/>=<sp/>Eigen::Matrix3d::Identity()<sp/>+<sp/>a<sp/>*<sp/>sin(theta)<sp/>+<sp/>a<sp/>*<sp/>a<sp/>*<sp/>(1<sp/>-<sp/>cos(theta));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>Rend<sp/>=<sp/>Rcur<sp/>*<sp/>Rinc;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>quatRes;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>quatRes<sp/>=<sp/>Rend;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quatRes;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">Eigen::Matrix&lt;double,3,3&gt;<sp/>Rx3(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta){<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>2D-XY<sp/>vector,<sp/>rotation<sp/>matrix<sp/>along<sp/>z<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,3,3&gt;<sp/>M;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>&lt;&lt;<sp/>1,<sp/>0,<sp/>0,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>cos(theta),<sp/>-sin(theta),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>sin(theta),<sp/><sp/>cos(theta);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">Eigen::Matrix&lt;double,3,3&gt;<sp/>Ry3(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta){<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>2D-XY<sp/>vector,<sp/>rotation<sp/>matrix<sp/>along<sp/>z<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,3,3&gt;<sp/>M;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>&lt;&lt;<sp/>cos(theta),<sp/>0,<sp/>sin(theta),</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-sin(theta),<sp/>0,<sp/>cos(theta);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">Eigen::Matrix&lt;double,3,3&gt;<sp/>Rz3(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta){<sp/></highlight><highlight class="comment">//local<sp/>to<sp/>world</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>2D-XY<sp/>vector,<sp/>rotation<sp/>matrix<sp/>along<sp/>z<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,3,3&gt;<sp/>M;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>&lt;&lt;<sp/>cos(theta),<sp/>-sin(theta),<sp/>0,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin(theta),<sp/>cos(theta),<sp/><sp/>0,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">Eigen::Matrix&lt;double,3,3&gt;<sp/>CrossProduct_A(Eigen::Matrix&lt;double,3,1&gt;<sp/><sp/>A){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,3,3&gt;<sp/>M;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>&lt;&lt;<sp/>0.0,<sp/>-A[2],<sp/>A[1],</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[2],<sp/>0.0,<sp/>-A[0],</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-A[1],<sp/>A[0],<sp/>0.0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ramp(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tgt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inc){</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(u<sp/>-<sp/>tgt)<sp/>&lt;<sp/>inc)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>tgt;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>&lt;<sp/>tgt<sp/>-<sp/>inc)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>u<sp/>+<sp/>inc;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>&gt;<sp/>tgt<sp/>+<sp/>inc)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>u<sp/>-<sp/>inc;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>tgt;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>Limit(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;data,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>max;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>&lt;<sp/>min)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>min;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="math/useful_math.cpp"/>
  </compounddef>
</doxygen>
