<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wbc__priority_8cpp" kind="file" language="C++">
    <compoundname>wbc_priority.cpp</compoundname>
    <includes refid="wbc__priority_8h" local="yes">wbc_priority.h</includes>
    <includes local="yes">iostream</includes>
    <incdepgraph>
      <node id="11">
        <label>priority_tasks.h</label>
        <link refid="priority__tasks_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>iomanip</label>
      </node>
      <node id="25">
        <label>json/json.h</label>
      </node>
      <node id="21">
        <label>pinocchio/algorithm/crba.hpp</label>
      </node>
      <node id="19">
        <label>pinocchio/algorithm/joint-configuration.hpp</label>
      </node>
      <node id="14">
        <label>pino_kin_dyn.h</label>
        <link refid="pino__kin__dyn_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>pinocchio/algorithm/center-of-mass.hpp</label>
      </node>
      <node id="1">
        <label>wbc_priority.cpp</label>
        <link refid="wbc__priority_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="3">
        <label>qpOASES.hpp</label>
      </node>
      <node id="6">
        <label>data_bus.h</label>
        <link refid="data__bus_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>pinocchio/algorithm/frames.hpp</label>
      </node>
      <node id="22">
        <label>pinocchio/algorithm/centroidal.hpp</label>
      </node>
      <node id="5">
        <label>Eigen/Dense</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
      <node id="2">
        <label>wbc_priority.h</label>
        <link refid="wbc__priority_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>pinocchio/algorithm/aba.hpp</label>
      </node>
      <node id="16">
        <label>pinocchio/algorithm/jacobian.hpp</label>
      </node>
      <node id="17">
        <label>pinocchio/algorithm/kinematics.hpp</label>
      </node>
      <node id="20">
        <label>pinocchio/algorithm/rnea.hpp</label>
      </node>
      <node id="10">
        <label>useful_math.h</label>
        <link refid="useful__math_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pinocchio/parsers/urdf.hpp</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">This<sp/>is<sp/>part<sp/>of<sp/>OpenLoong<sp/>Dynamics<sp/>Control,<sp/>an<sp/>open<sp/>project<sp/>for<sp/>the<sp/>control<sp/>of<sp/>biped<sp/>robot,</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(C)<sp/>2024<sp/>Humanoid<sp/>Robot<sp/>(Shanghai)<sp/>Co.,<sp/>Ltd,<sp/>under<sp/>Apache<sp/>2.0.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Feel<sp/>free<sp/>to<sp/>use<sp/>in<sp/>any<sp/>purpose,<sp/>and<sp/>cite<sp/>OpenLoong-Dynamics-Control<sp/>in<sp/>any<sp/>style,<sp/>to<sp/>contribute<sp/>to<sp/>the<sp/>advancement<sp/>of<sp/>the<sp/>community.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>&lt;https://atomgit.com/openloong/openloong-dyn-control.git&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>&lt;web@openloong.org.cn&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wbc_priority.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;iostream&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QP_nvIn=18,<sp/>QP_ncIn=22</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">WBC_priority::WBC_priority(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>model_nv_In,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QP_nvIn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>QP_ncIn,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>miu_In,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt):<sp/>QP_prob(QP_nvIn,<sp/>QP_ncIn)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>timeStep=dt;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>model_nv=model_nv_In;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>miu=miu_In;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>QP_nc=QP_ncIn;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>QP_nv=QP_nvIn;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>Sf=Eigen::MatrixXd::Zero(6,model_nv);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>Sf.block&lt;6,6&gt;(0,0)=Eigen::MatrixXd::Identity(6,6);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>St_qpV2=Eigen::MatrixXd::Zero(model_nv,model_nv-6);<sp/></highlight><highlight class="comment">//<sp/>6<sp/>means<sp/>the<sp/>dims<sp/>of<sp/>floating<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>St_qpV2.block(6,0,model_nv-6,model_nv-6)=Eigen::MatrixXd::Identity(model_nv-6,model_nv-6);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>St_qpV1=Eigen::MatrixXd::Zero(model_nv,6);<sp/></highlight><highlight class="comment">//<sp/>6<sp/>means<sp/>the<sp/>dims<sp/>of<sp/>delta_b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>St_qpV1.block&lt;6,6&gt;(0,0)=Eigen::MatrixXd::Identity(6,6);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defined<sp/>in<sp/>body<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>f_z_low=10;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>f_z_upp=1400;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_upp_L&lt;&lt;30,10,40;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_low_L&lt;&lt;-30,-10,-40;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>qpOASES::Options<sp/>options;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>options.setToMPC();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//options.setToReliable();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>options.printLevel=qpOASES::PL_LOW;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>QP_prob.setOptions(options);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_xOpt=Eigen::VectorXd::Zero(QP_nv);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_ddq_Opt=Eigen::VectorXd::Zero(model_nv);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_fr_Opt=Eigen::VectorXd::Zero(12);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_tau_Opt=Eigen::VectorXd::Zero(model_nv-6);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>delta_q_final_kin=Eigen::VectorXd::Zero(model_nv);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>dq_final_kin=Eigen::VectorXd::Zero(model_nv);;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>ddq_final_kin=Eigen::VectorXd::Zero(model_nv);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>base_rpy_cur=Eigen::VectorXd::Zero(3);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>WBC<sp/>task<sp/>defined<sp/>and<sp/>order<sp/>build</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;static_Contact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;Roll_Pitch_Yaw_Pz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;RedundantJoints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;PxPy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;PosRot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;SwingLeg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;HandTrack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.addTask(</highlight><highlight class="stringliteral">&quot;HandTrackJoints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>taskOrder;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>taskOrder.emplace_back(</highlight><highlight class="stringliteral">&quot;RedundantJoints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>taskOrder.emplace_back(</highlight><highlight class="stringliteral">&quot;static_Contact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>taskOrder.emplace_back(&quot;Roll_Pitch_Yaw_Pz&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>taskOrder.emplace_back(&quot;PxPy&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>taskOrder.emplace_back(</highlight><highlight class="stringliteral">&quot;PosRot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>taskOrder.emplace_back(</highlight><highlight class="stringliteral">&quot;SwingLeg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>taskOrder.emplace_back(&quot;HandTrack&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>taskOrder.emplace_back(</highlight><highlight class="stringliteral">&quot;HandTrackJoints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.buildPriority(taskOrder);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WBC_priority::dataBusRead(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDataBus" kindref="compound">DataBus</ref><sp/>&amp;robotState)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>foot-end<sp/>offset<sp/>posture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_L_rot_L_off=robotState.fe_L_rot_L_off;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>fe_R_rot_L_off=robotState.fe_R_rot_L_off;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deisred<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>base_rpy_des=robotState.base_rpy_des;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>base_rpy_cur&lt;&lt;robotState.rpy[0],robotState.rpy[1],robotState.rpy[2];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>base_pos_des=robotState.base_pos_des;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>swing_fe_pos_des_W=robotState.swing_fe_pos_des_W;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>swing_fe_rpy_des_W=robotState.swing_fe_rpy_des_W;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>stance_fe_pos_cur_W=robotState.stance_fe_pos_cur_W;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>stance_fe_rot_cur_W=robotState.stance_fe_rot_cur_W;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>stanceDesPos_W=robotState.stanceDesPos_W;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_l_pos_cur_W=robotState.hd_l_pos_W;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_r_pos_cur_W=robotState.hd_r_pos_W;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_l_rot_cur_W=robotState.hd_l_rot_W;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_r_rot_cur_W=robotState.hd_r_rot_W;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>des_ddq=robotState.des_ddq;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>des_dq=robotState.des_dq;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>des_delta_q=robotState.des_delta_q;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>des_q<sp/>=<sp/>robotState.des_q;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>J_base=robotState.J_base;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>dJ_base=robotState.dJ_base;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>base_rot=robotState.base_rot;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>base_pos=robotState.base_pos;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>Jfe=Eigen::MatrixXd::Zero(12,model_nv);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>Jfe.block(0,0,6,model_nv)=robotState.J_l;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>Jfe.block(6,0,6,model_nv)=robotState.J_r;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>J_hd_l=robotState.J_hd_l;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>J_hd_r=robotState.J_hd_r;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>dJ_hd_l=robotState.J_hd_l;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>dJ_hd_r=robotState.J_hd_r;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Fr_ff=robotState.Fr_ff;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>dyn_M=robotState.dyn_M;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>dyn_M_inv=robotState.dyn_M_inv;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>dyn_Ag=robotState.dyn_Ag;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>dyn_dAg=robotState.dyn_dAg;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>dyn_Non=robotState.dyn_Non;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>dq=robotState.dq;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>q=robotState.q;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>legStateCur=robotState.legState;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(legStateCur==DataBus::LSt)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jc<sp/>=<sp/>robotState.J_l;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dJc<sp/>=<sp/>robotState.dJ_l;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jsw<sp/>=<sp/>robotState.J_r;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dJsw<sp/>=<sp/>robotState.dJ_r;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_pos_sw_W<sp/>=<sp/>robotState.fe_r_pos_W;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_rot_sw_W<sp/>=robotState.fe_r_rot_W;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jc<sp/>=<sp/>robotState.J_r;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dJc<sp/>=<sp/>robotState.dJ_r;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jsw<sp/>=<sp/>robotState.J_l;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dJsw<sp/>=<sp/>robotState.dJ_l;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_pos_sw_W<sp/>=<sp/>robotState.fe_l_pos_W;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fe_rot_sw_W<sp/>=robotState.fe_l_rot_W;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WBC_priority::dataBusWrite(<ref refid="structDataBus" kindref="compound">DataBus</ref><sp/>&amp;robotState)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.wbc_tauJointRes=tauJointRes;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.wbc_FrRes=eigen_fr_Opt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.qp_cpuTime=cpu_time;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.qp_nWSR=nWSR;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.qp_status=qpStatus;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.wbc_delta_q_final=delta_q_final_kin;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.wbc_dq_final=dq_final_kin;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>robotState.wbc_ddq_final=ddq_final_kin;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QP<sp/>problem<sp/>contains<sp/>joint<sp/>torque,<sp/>QP_nv=6+12,<sp/>QP_nc=22;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WBC_priority::computeTau()<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constust<sp/>the<sp/>QP<sp/>problem,<sp/>refer<sp/>to<sp/>the<sp/>md<sp/>file<sp/>for<sp/>more<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>eigen_qp_A1=Eigen::MatrixXd::Zero(6,<sp/>QP_nv);</highlight><highlight class="comment">//<sp/>18<sp/>means<sp/>the<sp/>sum<sp/>of<sp/>dims<sp/>of<sp/>delta_r<sp/>and<sp/>delta_Fr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_A1.block&lt;6,6&gt;(0,<sp/>0)=<sp/>Sf<sp/>*<sp/>dyn_M<sp/>*<sp/>St_qpV1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_A1.block&lt;6,12&gt;(0,<sp/>6)=<sp/>-Sf<sp/>*<sp/>Jfe.transpose();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>eqRes=Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>eqRes=-Sf*dyn_M*ddq_final_kin-Sf*dyn_Non+Sf*Jfe.transpose()*Fr_ff;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>W=Eigen::MatrixXd::Zero(16,12);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>W(0,0)=1;W(0,2)=<sp/>sqrt(2)/2.0*miu;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>W(1,0)=-1;W(1,2)=<sp/>sqrt(2)/2.0*miu;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>W(2,1)=1;W(2,2)=<sp/>sqrt(2)/2.0*miu;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>W(3,1)=-1;W(3,2)=<sp/>sqrt(2)/2.0*miu;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>W.block&lt;4,4&gt;(4,2)=Eigen::MatrixXd::Identity(4,4);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>W.block&lt;8,6&gt;(8,6)=W.block&lt;8,6&gt;(0,0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>f_low=Eigen::VectorXd::Zero(16);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>f_upp=Eigen::VectorXd::Zero(16);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>tau_upp_fe,<sp/>tau_low_fe;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_upp_fe=fe_L_rot_L_off.transpose()*tau_upp_L;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_low_fe=fe_L_rot_L_off.transpose()*tau_low_L;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>tau_upp_W,<sp/>tau_low_W;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_upp_W=stance_fe_rot_cur_W*tau_upp_fe;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_low_W=stance_fe_rot_cur_W*tau_low_fe;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>f_upp.block&lt;8,1&gt;(0,0)&lt;&lt;1e10,1e10,1e10,1e10,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_z_upp,std::max(tau_upp_W(0),tau_low_W(0)),std::max(tau_upp_W(1),tau_low_W(1)),std::max(tau_upp_W(2),tau_low_W(2));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>f_upp.block&lt;8,1&gt;(8,0)=f_upp.block&lt;8,1&gt;(0,0);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>f_low.block&lt;8,1&gt;(0,0)&lt;&lt;0,0,0,0,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_z_low,std::min(tau_upp_W(0),tau_low_W(0)),std::min(tau_upp_W(1),tau_low_W(1)),std::min(tau_upp_W(2),tau_low_W(2));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>f_low.block&lt;8,1&gt;(8,0)=f_low.block&lt;8,1&gt;(0,0);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(legStateCur==DataBus::LSt)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(12)=0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(13)=0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(14)=0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(15)=0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(12)=0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(13)=0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(14)=0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(15)=0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(legStateCur==DataBus::RSt)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(4)=0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(5)=0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(6)=0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_upp(7)=0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(4)=0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(5)=0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(6)=0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_low(7)=0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>eigen_qp_A2=Eigen::MatrixXd::Zero(16,<sp/>18);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_A2.block&lt;16,12&gt;(0,6)=W;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>neqRes_low=Eigen::VectorXd::Zero(16);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>neqRes_upp=Eigen::VectorXd::Zero(16);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>neqRes_low=f_low-W*Fr_ff;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>neqRes_upp=f_upp-W*Fr_ff;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>eigen_qp_A_final=Eigen::MatrixXd::Zero(QP_nc,QP_nv);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_A_final.block&lt;6,18&gt;(0,0)=eigen_qp_A1;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_A_final.block&lt;16,18&gt;(6,0)=eigen_qp_A2;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>eigen_qp_lbA=Eigen::VectorXd::Zero(22);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>eigen_qp_ubA=Eigen::VectorXd::Zero(22);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_lbA.block&lt;6,1&gt;(0,0)=eqRes;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_lbA.block&lt;16,1&gt;(6,0)=neqRes_low;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_ubA.block&lt;6,1&gt;(0,0)=eqRes;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_ubA.block&lt;16,1&gt;(6,0)=neqRes_upp;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>eigen_qp_H=Eigen::MatrixXd::Zero(QP_nv,QP_nv);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>Q2=Eigen::MatrixXd::Identity(6,6);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>Q1=Eigen::MatrixXd::Identity(12,12);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_H.block&lt;6,6&gt;(0,0)=Q2*2.0*1e8;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_qp_H.block&lt;12,12&gt;(6,6)=Q1*2.0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>obj:<sp/>(1/2)x&apos;Hx+x&apos;g</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s.t.<sp/>lbA&lt;=Ax&lt;=ubA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lb&lt;=x&lt;=ub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qpOASES::real_t<sp/>qp_H[QP_nv*QP_nv];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qpOASES::real_t<sp/>qp_A[QP_nc*QP_nv];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qpOASES::real_t<sp/>qp_g[QP_nv];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qpOASES::real_t<sp/>qp_lbA[QP_nc];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qpOASES::real_t<sp/>qp_ubA[QP_nc];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>qpOASES::real_t<sp/>xOpt_iniGuess[QP_nv];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_Eigen_to_real_t(qp_H,eigen_qp_H,eigen_qp_H.rows(),eigen_qp_H.cols());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_Eigen_to_real_t(qp_A,eigen_qp_A_final,eigen_qp_A_final.rows(),eigen_qp_A_final.cols());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_Eigen_to_real_t(qp_lbA,eigen_qp_lbA,eigen_qp_lbA.rows(),eigen_qp_lbA.cols());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_Eigen_to_real_t(qp_ubA,eigen_qp_ubA,eigen_qp_ubA.rows(),eigen_qp_ubA.cols());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>qpOASES::returnValue<sp/>res;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;QP_nv;i++)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xOpt_iniGuess[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xOpt_iniGuess[i]<sp/>=eigen_xOpt(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qp_g[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>nWSR=200;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>cpu_time=timeStep;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>QP_prob.reset();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>res=QP_prob.init(qp_H,qp_g,qp_A,NULL,NULL,qp_lbA,qp_ubA,nWSR,&amp;cpu_time,xOpt_iniGuess);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>qpStatus=qpOASES::getSimpleStatus(res);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(res==qpOASES::SUCCESSFUL_RETURN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;WBC-QP:<sp/>successful_return\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if<sp/>(res==qpOASES::RET_MAX_NWSR_REACHED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;WBC-QP:<sp/>max_nwsr\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if<sp/>(res==qpOASES::RET_INIT_FAILED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;WBC-QP:<sp/>init_failed\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>qpOASES::real_t<sp/>xOpt[QP_nv];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>QP_prob.getPrimalSolution(xOpt);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res==qpOASES::SUCCESSFUL_RETURN)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;QP_nv;i++)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigen_xOpt(i)=xOpt[i];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_ddq_Opt=ddq_final_kin;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_ddq_Opt.block&lt;6,1&gt;(0,0)+=eigen_xOpt.block&lt;6,1&gt;(0,0);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>eigen_fr_Opt=Fr_ff+eigen_xOpt.block&lt;12,1&gt;(6,0);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>tauRes;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>tauRes=dyn_M*eigen_ddq_Opt+dyn_Non-Jfe.transpose()*eigen_fr_Opt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>tauJointRes=tauRes.block(6,0,model_nv-6,1);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>last_nWSR=nWSR;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>last_cpu_time=cpu_time;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WBC_priority::computeDdq(<ref refid="classPin__KinDyn" kindref="compound">Pin_KinDyn</ref><sp/>&amp;kinSolver)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">=kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;static_Contact&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX=Eigen::VectorXd::Zero(3);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX=Eigen::VectorXd::Zero(3);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes=Eigen::VectorXd::Zero(3);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes=Eigen::VectorXd::Zero(3);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp=Eigen::MatrixXd::Identity(3,3)*0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd=Eigen::MatrixXd::Identity(3,3)*0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J=Jc.block(0,0,3,model_nv);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ=dJc.block(0,0,3,model_nv);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()=Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">=kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;RedundantJoints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX=Eigen::VectorXd::Zero(5);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(0)=0-q(21);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(1)=0-q(22);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(2)=0-q(23);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(3)=0-q(24);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(4)=0-q(25);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX=Eigen::VectorXd::Zero(5);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes=Eigen::VectorXd::Zero(5);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes=Eigen::VectorXd::Zero(5);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp=Eigen::MatrixXd::Identity(5,5)*200;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd=Eigen::MatrixXd::Identity(5,5)*20;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J=Eigen::MatrixXd::Zero(5,model_nv);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J(0,20)=1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J(1,21)=1;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J(2,22)=1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J(3,23)=1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J(4,24)=1;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ=Eigen::MatrixXd::Zero(5,model_nv);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()=Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">=kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;Roll_Pitch_Yaw_Pz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX=Eigen::VectorXd::Zero(4);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>desRot=eul2Rot(base_rpy_des(0),base_rpy_des(1),base_rpy_des(2));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,1&gt;(0,<sp/>0)=diffRot(base_rot,<sp/>desRot);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(3)=base_pos_des(2)-q(2);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX=Eigen::VectorXd::Zero(4);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX.block&lt;3,1&gt;(0,0)=-dq.block&lt;3,1&gt;(3,0);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX(3)=0-dq(2);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes=Eigen::VectorXd::Zero(4);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes=Eigen::VectorXd::Zero(4);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp=Eigen::MatrixXd::Identity(4,4)*2000;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd=Eigen::MatrixXd::Identity(4,4)*10;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>taskMap=Eigen::MatrixXd::Zero(4,<sp/>6);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMap(0,<sp/>3)=1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMap(1,<sp/>4)=1;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMap(2,<sp/>5)=1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMap(3,<sp/>2)=1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J=taskMap*J_base;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ=taskMap*dJ_base;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()=Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">=kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;PxPy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX=Eigen::VectorXd::Zero(2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(1)=base_pos_des(1)<sp/>-<sp/>q(1);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX=Eigen::VectorXd::Zero(2);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX(0)=des_dq(0)<sp/>-<sp/>dq(0);//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes=Eigen::VectorXd::Zero(2);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes=Eigen::VectorXd::Zero(2);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp=Eigen::MatrixXd::Identity(2,2)*1.0;<sp/></highlight><highlight class="comment">//100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd=Eigen::MatrixXd::Identity(2,2)*0.0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMap=Eigen::MatrixXd::Zero(2,<sp/>6);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMap(0,<sp/>0)=1;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMap(1,<sp/>1)=1;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J=taskMap*J_base;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ=taskMap*dJ_base;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()=Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;PosRot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX<sp/>=<sp/>Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block(0,0,3,1)<sp/>=<sp/>base_pos_des<sp/>-<sp/>q.block(0,0,3,1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(kin_tasks.taskLib[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].errX(0))&gt;0.02)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(0)=0.02*<sp/>sign(kin_tasks.taskLib[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].errX(0));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(kin_tasks.taskLib[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].errX(1))&gt;0.01)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX(1)=0.01*<sp/>sign(kin_tasks.taskLib[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].errX(1));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desRot<sp/>=<sp/>eul2Rot(base_rpy_des(0),<sp/>base_rpy_des(1),<sp/>base_rpy_des(2));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,<sp/>1&gt;(3,<sp/>0)<sp/>=<sp/>diffRot(base_rot,<sp/>desRot);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX<sp/>=<sp/>-dq.block(0,<sp/>0,6,1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes<sp/>=<sp/>Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes<sp/>=<sp/>Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp<sp/>=<sp/>Eigen::MatrixXd::Identity(6,<sp/>6)<sp/>*<sp/>10;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp.block(1,1,1,1)=Eigen::MatrixXd::Identity(1,<sp/>1)<sp/>*<sp/>1000;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp.block(3,3,3,3)=Eigen::MatrixXd::Identity(3,<sp/>3)<sp/>*<sp/>2000;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd<sp/>=<sp/>Eigen::MatrixXd::Identity(6,<sp/>6)<sp/>*<sp/>1;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd.block(1,1,1,1)=Eigen::MatrixXd::Identity(1,<sp/>1)<sp/>*<sp/>500;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd.block(3,3,3,3)=Eigen::MatrixXd::Identity(3,<sp/>3)<sp/>*<sp/>100;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J<sp/>=<sp/>J_base;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ<sp/>=<sp/>dJ_base;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()<sp/>=<sp/>Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">=kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;SwingLeg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX=Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,1&gt;(0,0)=swing_fe_pos_des_W-fe_pos_sw_W;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desRot=<sp/>eul2Rot(swing_fe_rpy_des_W(0),swing_fe_rpy_des_W(1),swing_fe_rpy_des_W(2));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,1&gt;(3,0)=diffRot(fe_rot_sw_W,<sp/>desRot);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX=Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX=-Jsw*dq;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes=Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes=Eigen::VectorXd::Zero(6);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp=Eigen::MatrixXd::Identity(6,6)*3000;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp.block&lt;1,1&gt;(2,2)<sp/>=<sp/>kin_tasks.taskLib[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">].kp.block&lt;1,1&gt;(2,2)*0.1;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd=Eigen::MatrixXd::Identity(6,6)*20;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J=Jsw;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ=dJsw;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()=Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>task<sp/>6:<sp/>hand<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>swing<sp/>arm<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>hd_l_pos_L_des&lt;&lt;-0.02,<sp/>0.32,<sp/>-0.159;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>hd_r_pos_L_des&lt;&lt;-0.02,<sp/>-0.32,<sp/>-0.159;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>hd_l_eul_L_des&lt;&lt;-1.7581,<sp/>0.2129,<sp/>2.9581;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>hd_r_eul_L_des&lt;&lt;1.7581,<sp/>0.21291,<sp/>-2.9581;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>hd_l_eul_L_des={-1.7581,<sp/>0.2129,<sp/>2.9581};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>hd_r_eul_L_des={1.7581,<sp/>0.2129,<sp/>-2.9581};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>hd_l_rot_des=<sp/>eul2Rot(hd_l_eul_L_des(0),hd_l_eul_L_des(1),hd_l_eul_L_des(2));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>hd_r_rot_des=<sp/>eul2Rot(hd_r_eul_L_des(0),hd_r_eul_L_des(1),hd_r_eul_L_des(2));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>base2shoulder_l_pos_L_des={0.0040,<sp/>0.1616,<sp/>0.3922};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>shoulder2hand_l_pos_L_des={-0.0240,<sp/>0.1584,<sp/>-0.5512};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>base2shoulder_r_pos_L_des={0.0040,<sp/>-0.1616,<sp/>0.3922};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>shoulder2hand_r_pos_L_des={-0.0240,<sp/>-0.1584,<sp/>-0.5512};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l_hip_pitch=q(28)-qIniDes(28);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_hip_pitch=q(34)-qIniDes(34);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k=0.8;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_l_rot_des=<sp/>eul2Rot(0,-k*r_hip_pitch,0)*eul2Rot(hd_l_eul_L_des(0),hd_l_eul_L_des(1),hd_l_eul_L_des(2));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_r_rot_des=<sp/>eul2Rot(0,-k*l_hip_pitch,0)*eul2Rot(hd_r_eul_L_des(0),hd_r_eul_L_des(1),hd_r_eul_L_des(2));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>hd_l_pos_W_des=eul2Rot(0,-k*r_hip_pitch,0)*shoulder2hand_l_pos_L_des+base2shoulder_l_pos_L_des+base_pos;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>hd_r_pos_W_des=eul2Rot(0,-k*l_hip_pitch,0)*shoulder2hand_r_pos_L_des+base2shoulder_r_pos_L_des+base_pos;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>hd_l_rot_W_des=<sp/>hd_l_rot_des;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>hd_r_rot_W_des=<sp/>hd_r_rot_des;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">=kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;HandTrack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX=Eigen::VectorXd::Zero(12);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,1&gt;(0,0)=hd_l_pos_W_des-hd_l_pos_cur_W;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,1&gt;(3,0)=diffRot(hd_l_rot_cur_W,<sp/>hd_l_rot_W_des);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,1&gt;(6,0)=hd_r_pos_W_des-hd_r_pos_cur_W;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX.block&lt;3,1&gt;(9,0)=diffRot(hd_r_rot_cur_W,<sp/>hd_r_rot_W_des);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX=Eigen::VectorXd::Zero(12);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes=Eigen::VectorXd::Zero(12);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes=Eigen::VectorXd::Zero(12);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp=Eigen::MatrixXd::Identity(12,12)*2000;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd=Eigen::MatrixXd::Identity(12,12)*20;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J=Eigen::MatrixXd::Zero(12,model_nv);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J.block(0,0,6,model_nv)=J_hd_l;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J.block(6,0,6,model_nv)=J_hd_r;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ=Eigen::MatrixXd::Zero(12,model_nv);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ.block(0,0,6,model_nv)=dJ_hd_l;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ.block(6,0,6,model_nv)=dJ_hd_r;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()=Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>swing<sp/>arm<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_l_eul_L_des<sp/>=<sp/>{-1.7581,<sp/>0.2129,<sp/>2.9581};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_r_eul_L_des<sp/>=<sp/>{1.7581,<sp/>0.2129,<sp/>-2.9581};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_l_rot_des<sp/>=<sp/>eul2Rot(hd_l_eul_L_des(0),<sp/>hd_l_eul_L_des(1),<sp/>hd_l_eul_L_des(2));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_r_rot_des<sp/>=<sp/>eul2Rot(hd_r_eul_L_des(0),<sp/>hd_r_eul_L_des(1),<sp/>hd_r_eul_L_des(2));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>base2shoulder_l_pos_L_des<sp/>=<sp/>{0.0040,<sp/>0.1616,<sp/>0.3922};</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>shoulder2hand_l_pos_L_des<sp/>=<sp/>{-0.0240,<sp/>0.1584,<sp/>-0.5512};</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>base2shoulder_r_pos_L_des<sp/>=<sp/>{0.0040,<sp/>-0.1616,<sp/>0.3922};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>shoulder2hand_r_pos_L_des<sp/>=<sp/>{-0.0240,<sp/>-0.1584,<sp/>-0.5512};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>l_hip_pitch<sp/>=<sp/>0;<sp/>//q(28)<sp/>-<sp/>qIniDes(28);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>r_hip_pitch<sp/>=<sp/>0;<sp/>//q(34)<sp/>-<sp/>qIniDes(34);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0.8;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_l_rot_des<sp/>=</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eul2Rot(0,<sp/>-k<sp/>*<sp/>r_hip_pitch,<sp/>0)<sp/>*<sp/>eul2Rot(hd_l_eul_L_des(0),<sp/>hd_l_eul_L_des(1),<sp/>hd_l_eul_L_des(2));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>hd_r_rot_des<sp/>=</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eul2Rot(0,<sp/>-k<sp/>*<sp/>l_hip_pitch,<sp/>0)<sp/>*<sp/>eul2Rot(hd_r_eul_L_des(0),<sp/>hd_r_eul_L_des(1),<sp/>hd_r_eul_L_des(2));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>hd_l_pos_L_des<sp/>=</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eul2Rot(0,<sp/>-k<sp/>*<sp/>r_hip_pitch,<sp/>0)<sp/>*<sp/>shoulder2hand_l_pos_L_des<sp/>+<sp/>base2shoulder_l_pos_L_des;</highlight><highlight class="comment">//base_pos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>hd_r_pos_L_des<sp/>=</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eul2Rot(0,<sp/>-k<sp/>*<sp/>l_hip_pitch,<sp/>0)<sp/>*<sp/>shoulder2hand_r_pos_L_des<sp/>+<sp/>base2shoulder_r_pos_L_des;<sp/></highlight><highlight class="comment">//+<sp/>base_pos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resLeg=kinSolver.computeInK_Hand(hd_l_rot_des,hd_l_pos_L_des,hd_r_rot_des,hd_r_pos_L_des);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>kin_tasks.getId(</highlight><highlight class="stringliteral">&quot;HandTrackJoints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX<sp/>=<sp/>Eigen::VectorXd::Zero(14);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].errX=resLeg.jointPosRes.block&lt;14,1&gt;(0,0)-q.block&lt;14,1&gt;(7,0);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].derrX<sp/>=<sp/>Eigen::VectorXd::Zero(14);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].ddxDes<sp/>=<sp/>Eigen::VectorXd::Zero(14);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dxDes<sp/>=<sp/>Eigen::VectorXd::Zero(14);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kp<sp/>=<sp/>Eigen::MatrixXd::Identity(14,<sp/>14)<sp/>*<sp/>10;<sp/></highlight><highlight class="comment">//100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].kd<sp/>=<sp/>Eigen::MatrixXd::Identity(14,<sp/>14)<sp/>*<sp/>5;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J<sp/>=<sp/>Eigen::MatrixXd::Zero(14,model_nv);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].J.block(0,6,14,14)=Eigen::MatrixXd::Identity(14,14);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].dJ<sp/>=<sp/>Eigen::MatrixXd::Zero(14,model_nv);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.taskLib[id].W.diagonal()<sp/>=<sp/>Eigen::VectorXd::Ones(model_nv);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>kin_tasks.computeAll(des_delta_q,des_dq,des_ddq,dyn_M,<sp/>dyn_M_inv,<sp/>dq);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>WBC<sp/>output<sp/>collection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>delta_q_final_kin=kin_tasks.out_delta_q;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>dq_final_kin=kin_tasks.out_dq;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>ddq_final_kin=kin_tasks.out_ddq;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WBC_priority::copy_Eigen_to_real_t(qpOASES::real_t<sp/>*target,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCols)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nRows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nCols;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target[count++]<sp/>=<sp/>isinf(source(i,<sp/>j))<sp/>?<sp/>qpOASES::INFTY<sp/>:<sp/>source(i,<sp/>j);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WBC_priority::setQini(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;qIni)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>qIniDes=qIni;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="algorithm/wbc_priority.cpp"/>
  </compounddef>
</doxygen>
