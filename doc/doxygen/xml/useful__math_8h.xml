<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="useful__math_8h" kind="file" language="C++">
    <compoundname>useful_math.h</compoundname>
    <includes local="yes">Eigen/Dense</includes>
    <includes local="no">vector</includes>
    <includedby refid="gait__scheduler_8h" local="yes">gait_scheduler.h</includedby>
    <includedby refid="mpc_8cpp" local="yes">mpc.cpp</includedby>
    <includedby refid="priority__tasks_8h" local="yes">priority_tasks.h</includedby>
    <includedby refid="wbc__priority_8h" local="yes">wbc_priority.h</includedby>
    <includedby refid="float__control_8cpp" local="yes">float_control.cpp</includedby>
    <includedby refid="jump__mpc_8cpp" local="yes">jump_mpc.cpp</includedby>
    <includedby refid="walk__mpc__wbc_8cpp" local="yes">walk_mpc_wbc.cpp</includedby>
    <includedby refid="walk__wbc_8cpp" local="yes">walk_wbc.cpp</includedby>
    <includedby refid="walk__wbc__speed__test_8cpp" local="yes">walk_wbc_speed_test.cpp</includedby>
    <includedby refid="useful__math_8cpp" local="yes">useful_math.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>Eigen/Dense</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="1">
        <label>useful_math.h</label>
        <link refid="useful__math_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>priority_tasks.h</label>
        <link refid="priority__tasks_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>useful_math.cpp</label>
        <link refid="useful__math_8cpp_source"/>
      </node>
      <node id="5">
        <label>walk_wbc.cpp</label>
        <link refid="walk__wbc_8cpp_source"/>
      </node>
      <node id="11">
        <label>wbc_priority.cpp</label>
        <link refid="wbc__priority_8cpp_source"/>
      </node>
      <node id="3">
        <label>gait_scheduler.cpp</label>
        <link refid="gait__scheduler_8cpp_source"/>
      </node>
      <node id="2">
        <label>gait_scheduler.h</label>
        <link refid="gait__scheduler_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>walk_mpc_wbc.cpp</label>
        <link refid="walk__mpc__wbc_8cpp_source"/>
      </node>
      <node id="10">
        <label>wbc_priority.h</label>
        <link refid="wbc__priority_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>jump_mpc.cpp</label>
        <link refid="jump__mpc_8cpp_source"/>
      </node>
      <node id="7">
        <label>mpc.cpp</label>
        <link refid="mpc_8cpp_source"/>
      </node>
      <node id="6">
        <label>walk_wbc_speed_test.cpp</label>
        <link refid="walk__wbc__speed__test_8cpp_source"/>
      </node>
      <node id="12">
        <label>float_control.cpp</label>
        <link refid="float__control_8cpp_source"/>
      </node>
      <node id="1">
        <label>useful_math.h</label>
        <link refid="useful__math_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>priority_tasks.cpp</label>
        <link refid="priority__tasks_8cpp_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="useful__math_8h_1af037bc69777912864b2dd9689fc53463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd pseudoInv_SVD</definition>
        <argsstring>(const Eigen::MatrixXd &amp;mat)</argsstring>
        <name>pseudoInv_SVD</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="13" column="17" bodyfile="math/useful_math.cpp" bodystart="15" bodyend="36" declfile="math/useful_math.h" declline="13" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1afee736f9aea90e8cdca938c355c6c21b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd pseudoInv_right</definition>
        <argsstring>(const Eigen::MatrixXd &amp;M)</argsstring>
        <name>pseudoInv_right</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="15" column="17" bodyfile="math/useful_math.cpp" bodystart="38" bodyend="44" declfile="math/useful_math.h" declline="15" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a880b738cfae7560eafd53111e1023b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd pseudoInv_right_weighted</definition>
        <argsstring>(const Eigen::MatrixXd &amp;M, const Eigen::DiagonalMatrix&lt; double, -1 &gt; &amp;W)</argsstring>
        <name>pseudoInv_right_weighted</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const Eigen::DiagonalMatrix&lt; double, -1 &gt; &amp;</type>
          <declname>W</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="17" column="17" bodyfile="math/useful_math.cpp" bodystart="46" bodyend="54" declfile="math/useful_math.h" declline="17" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1afad6c3caf0792565bb383cdc2c109255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd dyn_pseudoInv</definition>
        <argsstring>(const Eigen::MatrixXd &amp;M, const Eigen::MatrixXd &amp;dyn_M, bool isMinv)</argsstring>
        <name>dyn_pseudoInv</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>dyn_M</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isMinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="20" column="17" bodyfile="math/useful_math.cpp" bodystart="65" bodyend="82" declfile="math/useful_math.h" declline="20" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a1385bfa9bfd643e0197453b251545b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 3&gt; eul2Rot</definition>
        <argsstring>(double roll, double pitch, double yaw)</argsstring>
        <name>eul2Rot</name>
        <param>
          <type>double</type>
          <declname>roll</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="22" column="15" bodyfile="math/useful_math.cpp" bodystart="84" bodyend="96" declfile="math/useful_math.h" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1afb3f75dd1b7d3592b997ddfc6e9605d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d Rot2eul</definition>
        <argsstring>(const Eigen::Matrix3d &amp;rot)</argsstring>
        <name>Rot2eul</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="24" column="17" bodyfile="math/useful_math.cpp" bodystart="98" bodyend="104" declfile="math/useful_math.h" declline="24" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1accf9d6157c07b4d20d3eee5adbbd9925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond eul2quat</definition>
        <argsstring>(double roll, double pitch, double yaw)</argsstring>
        <name>eul2quat</name>
        <param>
          <type>double</type>
          <declname>roll</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="26" column="20" bodyfile="math/useful_math.cpp" bodystart="111" bodyend="118" declfile="math/useful_math.h" declline="26" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1aafcba8b4f813795d34936d8efbd3b34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; eigen2std</definition>
        <argsstring>(const Eigen::VectorXd &amp;Vec)</argsstring>
        <name>eigen2std</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>Vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="28" column="13" bodyfile="math/useful_math.cpp" bodystart="106" bodyend="109" declfile="math/useful_math.h" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a17a87cb290d7d733d38f4501be54c5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 1&gt; diffRot</definition>
        <argsstring>(const Eigen::Matrix3d &amp;Rcur, Eigen::Matrix3d &amp;Rdes)</argsstring>
        <name>diffRot</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>Rcur</declname>
        </param>
        <param>
          <type>Eigen::Matrix3d &amp;</type>
          <declname>Rdes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="30" column="15" bodyfile="math/useful_math.cpp" bodystart="120" bodyend="137" declfile="math/useful_math.h" declline="30" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a085d863b7ffc375dbbaf24e3e7a593ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 4, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 4, 1&gt; quat2axisAngle</definition>
        <argsstring>(const Eigen::Quaternion&lt; double &gt; &amp;quat)</argsstring>
        <name>quat2axisAngle</name>
        <param>
          <type>const Eigen::Quaternion&lt; double &gt; &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="32" column="15" bodyfile="math/useful_math.cpp" bodystart="139" bodyend="156" declfile="math/useful_math.h" declline="32" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a0af15db62db60f23a2a451b44e2e117e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Quaterniond</type>
        <definition>Eigen::Quaterniond intQuat</definition>
        <argsstring>(const Eigen::Quaterniond &amp;quat, const Eigen::Matrix&lt; double, 3, 1 &gt; &amp;w)</argsstring>
        <name>intQuat</name>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>quat</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; double, 3, 1 &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="34" column="20" bodyfile="math/useful_math.cpp" bodystart="158" bodyend="175" declfile="math/useful_math.h" declline="34" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a0adbc700e3453f8dc9f2302f96631740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 3&gt; Rx3</definition>
        <argsstring>(double theta)</argsstring>
        <name>Rx3</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="36" column="15" bodyfile="math/useful_math.cpp" bodystart="186" bodyend="193" declfile="math/useful_math.h" declline="36" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1ab68b75e42d593faaf5bfec75a471525a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 3&gt; Ry3</definition>
        <argsstring>(double theta)</argsstring>
        <name>Ry3</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="38" column="15" bodyfile="math/useful_math.cpp" bodystart="195" bodyend="202" declfile="math/useful_math.h" declline="38" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1ae6370c4448e134e686cfb53f529c607a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 3&gt; Rz3</definition>
        <argsstring>(double theta)</argsstring>
        <name>Rz3</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="40" column="15" bodyfile="math/useful_math.cpp" bodystart="204" bodyend="211" declfile="math/useful_math.h" declline="40" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1aac216bf8f72738db3104bf8a0a036de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>Eigen::Matrix&lt;double, 3, 3&gt; CrossProduct_A</definition>
        <argsstring>(Eigen::Matrix&lt; double, 3, 1 &gt; A)</argsstring>
        <name>CrossProduct_A</name>
        <param>
          <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="42" column="15" bodyfile="math/useful_math.cpp" bodystart="213" bodyend="219" declfile="math/useful_math.h" declline="42" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1aa4c781935af8c4b0b615b3a5af2d7b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Ramp</definition>
        <argsstring>(double u, double tgt, double inc)</argsstring>
        <name>Ramp</name>
        <param>
          <type>double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tgt</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="44" column="8" bodyfile="math/useful_math.cpp" bodystart="221" bodyend="233" declfile="math/useful_math.h" declline="44" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a367f4c39363e14ee187965e0531fb887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Limit</definition>
        <argsstring>(double &amp;data, double max, double min)</argsstring>
        <name>Limit</name>
        <param>
          <type>double &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="46" column="6" bodyfile="math/useful_math.cpp" bodystart="235" bodyend="240" declfile="math/useful_math.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="useful__math_8h_1a928a196c5b583ec2adeb35dddde1d3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sign</definition>
        <argsstring>(const double &amp;x)</argsstring>
        <name>sign</name>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="math/useful_math.h" line="48" column="8" bodyfile="math/useful_math.cpp" bodystart="177" bodyend="184" declfile="math/useful_math.h" declline="48" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">This<sp/>is<sp/>part<sp/>of<sp/>OpenLoong<sp/>Dynamics<sp/>Control,<sp/>an<sp/>open<sp/>project<sp/>for<sp/>the<sp/>control<sp/>of<sp/>biped<sp/>robot,</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(C)<sp/>2024<sp/>Humanoid<sp/>Robot<sp/>(Shanghai)<sp/>Co.,<sp/>Ltd,<sp/>under<sp/>Apache<sp/>2.0.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Feel<sp/>free<sp/>to<sp/>use<sp/>in<sp/>any<sp/>purpose,<sp/>and<sp/>cite<sp/>OpenLoong-Dynamics-Control<sp/>in<sp/>any<sp/>style,<sp/>to<sp/>contribute<sp/>to<sp/>the<sp/>advancement<sp/>of<sp/>the<sp/>community.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>&lt;https://atomgit.com/openloong/openloong-dyn-control.git&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>&lt;web@openloong.org.cn&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Eigen/Dense&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">Eigen::MatrixXd<sp/>pseudoInv_SVD(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;mat);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">Eigen::MatrixXd<sp/>pseudoInv_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;M);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">Eigen::MatrixXd<sp/>pseudoInv_right_weighted(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;M,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::DiagonalMatrix&lt;double,<sp/>-1&gt;<sp/>&amp;W);<sp/></highlight><highlight class="comment">//<sp/>weighted<sp/>right<sp/>pseudo<sp/>inverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">Eigen::MatrixXd<sp/>dyn_pseudoInv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;M,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/>&amp;dyn_M,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMinv);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>eul2Rot(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">Eigen::Vector3d<sp/>Rot2eul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3d<sp/>&amp;rot);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">Eigen::Quaterniond<sp/>eul2quat(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pitch,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">std::vector&lt;double&gt;<sp/>eigen2std(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;Vec);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>1&gt;<sp/>diffRot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix3d<sp/>&amp;Rcur,<sp/>Eigen::Matrix3d<sp/>&amp;Rdes);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>4,<sp/>1&gt;<sp/>quat2axisAngle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternion&lt;double&gt;<sp/>&amp;quat);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">Eigen::Quaterniond<sp/>intQuat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>&amp;quat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>1&gt;<sp/>&amp;w);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>Rx3(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>Ry3(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>Rz3(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;<sp/>CrossProduct_A(Eigen::Matrix&lt;double,<sp/>3,<sp/>1&gt;<sp/>A);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ramp(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>u,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tgt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inc);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Limit(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;data,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;x);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="math/useful_math.h"/>
  </compounddef>
</doxygen>
