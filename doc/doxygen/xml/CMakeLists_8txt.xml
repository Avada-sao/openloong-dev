<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.10)</highlight></codeline>
<codeline lineno="2"><highlight class="normal">project(openloong-dyn-control)</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">IF<sp/>(NOT<sp/>CMAKE_BUILD_TYPE)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>set(CMAKE_BUILD_TYPE<sp/>Release)<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="normal">ENDIF<sp/>()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">add_compile_options(-std=c++17)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#系统eigen版本可能老旧，使用自供eigen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">set(dirEigen<sp/></highlight><highlight class="stringliteral">&quot;third_party/eigen3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">set(dirGlfw<sp/></highlight><highlight class="stringliteral">&quot;third_party/glfw&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">set(dirPino<sp/></highlight><highlight class="stringliteral">&quot;third_party/pinocchio&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">set(dirJson<sp/></highlight><highlight class="stringliteral">&quot;third_party/jsoncpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">set(dirQuill<sp/></highlight><highlight class="stringliteral">&quot;third_party/quill&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">set(dirQP<sp/></highlight><highlight class="stringliteral">&quot;third_party/qpOASES&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">set(libURDF<sp/></highlight><highlight class="stringliteral">&quot;third_party/urdfdom&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">set(incFmt<sp/></highlight><highlight class="stringliteral">&quot;third_party/quill/quill/bundled&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">set(incBoost<sp/></highlight><highlight class="stringliteral">&quot;third_party/boost&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">set(incMujoco<sp/></highlight><highlight class="stringliteral">&quot;third_party/mujoco&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">set(allDir<sp/>${dirEigen}<sp/>${dirGlfw}<sp/>${dirPino}<sp/>${dirJson}<sp/>${dirQuill}<sp/>${dirQP}<sp/>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">set(allLib<sp/>${allDir}<sp/>${libURDF})</highlight></codeline>
<codeline lineno="26"><highlight class="normal">set(allInc<sp/>${allDir}<sp/>${incFmt}<sp/>${incBoost}<sp/>${incMujoco})</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">include_directories(${allInc})</highlight></codeline>
<codeline lineno="29"><highlight class="normal">include_directories(</highlight><highlight class="stringliteral">&quot;algorithm&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">include_directories(&quot;common&quot;)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">include_directories(&quot;math&quot;)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">include_directories(&quot;sim_interface&quot;)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">message(${CMAKE_SYSTEM_PROCESSOR})</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(${CMAKE_CXX_COMPILER}<sp/>MATCHES<sp/></highlight><highlight class="stringliteral">&quot;aarch64&quot;</highlight><highlight class="normal"><sp/>OR<sp/>${CMAKE_SYSTEM_PROCESSOR}<sp/>MATCHES<sp/></highlight><highlight class="stringliteral">&quot;aarch64&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>list(APPEND<sp/>allLib<sp/></highlight><highlight class="stringliteral">&quot;third_party/mujoco/lin_arm64&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>list(APPEND<sp/>allLib<sp/></highlight><highlight class="stringliteral">&quot;third_party/mujoco/lin_x64&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">endif()</highlight></codeline>
<codeline lineno="40"><highlight class="normal">link_directories(${allLib})</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">file(GLOB<sp/>C_SOURCES<sp/>*.c)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">file(GLOB<sp/>CPP_SOURCES<sp/>*.cpp<sp/>algorithm</highlight><highlight class="comment">/*.cpp<sp/>common/*.cpp<sp/>math/*.cpp<sp/>sim_interface/*.cpp)</highlight></codeline>
<codeline lineno="44"><highlight class="comment">file(GLOB<sp/>HEADER_FILES<sp/>*.h<sp/>algorithm/*.h<sp/>common/*.h<sp/>math/*.h<sp/>sim_interface/*.h)</highlight></codeline>
<codeline lineno="45"><highlight class="comment">set(SOURCES<sp/>${C_SOURCES}<sp/>${CPP_SOURCES}<sp/>${HEADER_FILES})</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">#链接库</highlight></codeline>
<codeline lineno="48"><highlight class="comment">set(corLibs<sp/>pinocchio<sp/>urdfdom_model<sp/>tinyxml<sp/>console_bridge<sp/>jsoncpp<sp/>quill<sp/>qpOASES)</highlight></codeline>
<codeline lineno="49"><highlight class="comment">set(simLibs<sp/>glfw3)#mujoco区分x86/arm的方式不一样，在上面按link目录区分</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">#根据架构，处理连接库</highlight></codeline>
<codeline lineno="52"><highlight class="comment">set(sysCoreLibs)</highlight></codeline>
<codeline lineno="53"><highlight class="comment">set(sysSimLibs)</highlight></codeline>
<codeline lineno="54"><highlight class="comment">if(${CMAKE_CXX_COMPILER}<sp/>MATCHES<sp/>&quot;aarch64&quot;<sp/>OR<sp/>${CMAKE_SYSTEM_PROCESSOR}<sp/>MATCHES<sp/>&quot;aarch64&quot;)</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>message(&quot;linux<sp/>arm64架构&quot;)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>foreach(lib<sp/>${corLibs})</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list(APPEND<sp/>sysCoreLibs<sp/>${lib}_lin_arm64)</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>endforeach()</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>foreach(lib<sp/>${simLibs})</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list(APPEND<sp/>sysSimLibs<sp/>${lib}_lin_arm64)</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/>endforeach()</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>list(APPEND<sp/>sysSimLibs<sp/>dl)#arm<sp/>需要<sp/>-ldl</highlight></codeline>
<codeline lineno="63"><highlight class="comment">else()</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>message(&quot;linux<sp/>x64架构&quot;)</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>foreach(lib<sp/>${corLibs})</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list(APPEND<sp/>sysCoreLibs<sp/>${lib}_lin_x64)</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>endforeach()</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>foreach(lib<sp/>${simLibs})</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list(APPEND<sp/>sysSimLibs<sp/>${lib}_lin_x64)</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>endforeach()</highlight></codeline>
<codeline lineno="71"><highlight class="comment">endif()</highlight></codeline>
<codeline lineno="72"><highlight class="comment">message(${sysCoreLibs})</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">#生成控制核心库</highlight></codeline>
<codeline lineno="75"><highlight class="comment">add_library(core<sp/>${SOURCES})</highlight></codeline>
<codeline lineno="76"><highlight class="comment">target_link_libraries(core<sp/>${sysCoreLibs}<sp/>pthread)</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">#生成仿真可执行文件</highlight></codeline>
<codeline lineno="79"><highlight class="comment">add_executable(walk_mpc_wbc<sp/>demo/walk_mpc_wbc.cpp)</highlight></codeline>
<codeline lineno="80"><highlight class="comment">target_link_libraries(walk_mpc_wbc<sp/>core<sp/>mujoco<sp/>${sysSimLibs}<sp/>dl)</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">add_executable(walk_wbc<sp/>demo/walk_wbc.cpp)</highlight></codeline>
<codeline lineno="83"><highlight class="comment">target_link_libraries(walk_wbc<sp/>core<sp/>mujoco<sp/>${sysSimLibs}<sp/>dl)</highlight></codeline>
<codeline lineno="84"><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">add_executable(jump_mpc<sp/>demo/jump_mpc.cpp)</highlight></codeline>
<codeline lineno="86"><highlight class="comment">target_link_libraries(jump_mpc<sp/>core<sp/>mujoco<sp/>${sysSimLibs}<sp/>dl)</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">add_executable(float_control<sp/>demo/float_control.cpp)</highlight></codeline>
<codeline lineno="89"><highlight class="comment">target_link_libraries(float_control<sp/>core<sp/>mujoco<sp/>${sysSimLibs}<sp/>dl)</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">add_executable(wbc_speed_test<sp/>demo/walk_wbc_speed_test.cpp)</highlight></codeline>
<codeline lineno="92"><highlight class="comment">target_link_libraries(wbc_speed_test<sp/>core<sp/>mujoco<sp/>${sysSimLibs}<sp/>dl)</highlight></codeline>
<codeline lineno="93"><highlight class="comment"></highlight></codeline>
    </programlisting>
    <location file="CMakeLists.txt"/>
  </compounddef>
</doxygen>
